"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.vnu = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const tmp_promise_1 = require("tmp-promise");
const vnuJar = require("vnu-jar");
const url_1 = require("url");
function isURL(str) {
    try {
        new url_1.URL(str);
        return true;
    }
    catch (err) {
        if (err.code === "ERR_INVALID_URL") {
            return false;
        }
        else {
            throw err;
        }
    }
}
function vnu(target, opt = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        let mode = "url";
        let cleanupTmp = () => { };
        if (isURL(target) || fs_1.existsSync(target)) {
            mode = "url";
        }
        else {
            mode = "html";
        }
        const options = Object.assign({
            "errors-only": false,
            html: false,
            "no-stream": false,
        }, opt);
        let vnuCmd = `java -Xss1024k -jar ${vnuJar} `;
        for (const [key, val] of Object.entries(options)) {
            if (key === "format" ||
                key === "exit-zero-always" ||
                key === "help" ||
                key === "verbose" ||
                key === "version" ||
                key === "Werror") {
                console.warn(`WARNING: ${key} option is ignored in this module.`);
                continue;
            }
            else if (key === "filterfile" ||
                key === "filterpattern" ||
                key === "user-agent") {
                vnuCmd += `--${key} "${val}" `;
            }
            else if (val === true) {
                vnuCmd += `--${key} `;
            }
        }
        vnuCmd += "--format json ";
        if (mode === "url") {
            vnuCmd += `"${target}"`;
        }
        else {
            if (process.platform === "win32") {
                const { fd, path, cleanup } = yield tmp_promise_1.file();
                cleanupTmp = cleanup;
                fs_1.writeFileSync(fd, target);
                vnuCmd = `${vnuCmd}${path}`;
            }
            else {
                vnuCmd = `cat << _EOF_ | ${vnuCmd}-
${target}
_EOF_`;
            }
        }
        return yield new Promise((resolve, reject) => {
            child_process_1.exec(vnuCmd, (err, stdout, stderr) => {
                if (err && !err.message.startsWith("Command failed:")) {
                    return reject(err);
                }
                if (stdout) {
                    console.log(stdout);
                }
                try {
                    let messages = JSON.parse(stderr).messages;
                    if (process.platform === "win32" && mode === "html") {
                        cleanupTmp();
                        messages = messages.map(message => {
                            delete message.url;
                            return message;
                        });
                    }
                    return resolve(messages);
                }
                catch (err) {
                    if (err instanceof SyntaxError) {
                        reject(new SyntaxError(`Nu HTML Checker did not return JSON. The output Nu HTML Checker returned is:
-----
${stderr}
-----
The command is:
-----
${vnuCmd}
-----
`));
                    }
                    else {
                        reject(err);
                    }
                }
            });
        });
    });
}
exports.vnu = vnu;
;
